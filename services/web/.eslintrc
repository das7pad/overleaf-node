{
  "root": true,
  "env": {
    "browser": false,
    "mocha": false,
    "node": true,
    "es2020": true
  },
  "rules": {
    // do not allow importing of implicit dependencies.
    "import/no-extraneous-dependencies": "error"
  },
  "overrides": [
    {
      "files": ["**/*.js"],
      "extends": [
        "eslint:recommended",
        "standard",
        "prettier"
      ]
    },
    {
      "files": ["**/*.ts", "**/*.tsx"],
      "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "standard",
        "prettier"
      ],
      "plugins": ["@typescript-eslint"],
      "parser": "@typescript-eslint/parser",
      "rules": {
        // disable some TypeScript rules
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/no-unused-vars": "off",
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-this-alias": "off",
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/ban-ts-comment": "off"
      }
    },
    {
      // Test specific rules
      "files": ["**/test/**/*.*"],
      "plugins": [
        "mocha",
        "chai-expect",
        "chai-friendly"
      ],
      "env": {
        "mocha": true
      },
      "rules": {
        // mocha-specific rules
        "mocha/handle-done-callback": "error",
        "mocha/no-exclusive-tests": "error",
        "mocha/no-global-tests": "error",
        "mocha/no-identical-title": "error",
        "mocha/no-nested-tests": "error",
        "mocha/no-pending-tests": "error",
        "mocha/no-skipped-tests": "error",
        "mocha/no-mocha-arrows": "error",


        // Swap the no-unused-expressions rule with a more chai-friendly one
        "no-unused-expressions": "off",
        "chai-friendly/no-unused-expressions": "error",

        // chai-specific rules
        "chai-expect/missing-assertion": "error",
        "chai-expect/terminating-properties": "error",

        // prefer-arrow-callback applies to all callbacks, not just ones in mocha tests.
        // we don't enforce this at the top-level - just in tests to manage `this` scope
        // based on mocha's context mechanism
        "mocha/prefer-arrow-callback": "error"
      }
    },
    {
      // Cypress specific rules
      "files": ["cypress/**/*.{js,ts,tsx}", "**/test/frontend/**/*.spec.{js,ts,tsx}"],
      "extends": [
        "plugin:cypress/recommended"
      ]
    },
    {
      // Frontend specific rules
      "files": [
        "esbuild/inject/*.js",
        "**/frontend/js/**/*.{js,ts,tsx}"
      ],
      "env": {
        "browser": true,
        "node": false
      },
      "globals": {
        "$": true,
        "angular": true,
        "ace": true,
        "ga": true,
        "sl_console": true,
        "sl_debugging": true
      }
    },
    {
      // React rules
      "files": [
        "**/frontend/js/**/*.{js,ts,tsx}",
        "**/frontend/stories/**/*.{js,ts,tsx}",
        "**/*.stories.{js,ts,tsx}",
        "**/test/frontend/**/*.{js,ts,tsx}",
        "**/test/frontend/components/**/*.spec.{js,ts,tsx}"
      ],
      "extends": [
        "plugin:react/recommended",
        "plugin:react-hooks/recommended",
        "plugin:jsx-a11y/recommended",
        "standard-jsx",
        "prettier"
      ],
      "plugins": [
        "jsx-a11y"
      ],
      "env": {
        "browser": true
      },
      "rules": {
        // TODO: remove once https://github.com/standard/eslint-config-standard-react/issues/68 (support eslint@8) is fixed.
        // START: inline standard-react rules
        // "react/jsx-no-bind": ["error", {
        //   "allowArrowFunctions": true,
        //   "allowBind": false,
        //   "ignoreRefs": true
        // },],
        "react/no-did-update-set-state": "error",
        "react/no-unknown-property": "error",
        "react/no-unused-prop-types": "error",
        "react/prop-types": "error",
        // "react/react-in-jsx-scope": "error",
        // END: inline standard-react rules

        "react/jsx-no-target-blank": ["error", {
          "allowReferrer": true
        }],
        // Prevent usage of legacy string refs
        "react/no-string-refs": "error",

        // Prevent curly braces around strings (as they're unnecessary)
        "react/jsx-curly-brace-presence": ["error", {
          "props": "never",
          "children": "never"
        }],

        // https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html
        "react/react-in-jsx-scope": "off",
        "react/jsx-uses-react": "off",

        // Allow functions as JSX props
        "react/jsx-no-bind": "off", // TODO: fix occurrences and re-enable this

        // Fix conflict between prettier & standard by overriding to prefer
        // double quotes
        "jsx-quotes": ["error", "prefer-double"],

        // Override weird behaviour of jsx-a11y label-has-for (says labels must be
        // nested *and* have for/id attributes)
        "jsx-a11y/label-has-for": [
          "error",
          {
            "required": {
              "some": [
                "nesting",
                "id"
              ]
            }
          }
        ]
      },
      "settings": {
        // Tell eslint-plugin-react to detect which version of React we are using
        "react": {
          "version": "detect"
        }
      },
      "parserOptions": {
        "sourceType": "module",
        "ecmaFeatures": {
          "jsx": true
        }
      }
    },
    // React + TypeScript-specific rules
    {
      "files": ["**/*.tsx"],
      "rules": {
        "react/prop-types": "off",
        "no-undef": "off"
      }
    },
    // TypeScript-specific rules
    {
      "files": ["**/*.ts"],
      "rules": {
        "no-undef": "off"
      }
    }
  ]
}
